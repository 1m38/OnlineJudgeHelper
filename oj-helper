#!/usr/bin/env python
# coding: utf-8
"""docstring"""

from __future__ import print_function
from __future__ import unicode_literals
from __future__ import division
from __future__ import absolute_import
import os
import sys
import re
import subprocess
import json
import shutil
import time
from testcase import TestCase
import oj_sites

# compatible with Python2
if sys.version_info.major == 2:
    input = raw_input

color = {"reset"    : "\033[0m",
         "bBlack"   : "\033[30;1m",
         "bRed"     : "\033[31;1m",
         "bGreen"   : "\033[32;1m",
         "bYellow"  : "\033[33;1m",
         "bBlue"    : "\033[34;1m",
         "bMagenta" : "\033[35;1m",
         "bCyan"    : "\033[36;1m",
         "bWhite"   : "\033[37;1m",
         "Black"    : "\033[30m",
         "Red"      : "\033[31m",
         "Green"    : "\033[32m",
         "Yellow"   : "\033[33m",
         "Blue"     : "\033[34m",
         "Magenta"  : "\033[35m",
         "Cyan"     : "\033[36m",
         "White"    : "\033[37m"}

re_isFloat = re.compile('^[+-]?(\d*\.\d+|\d+\.?\d*)([eE][+-]?\d+|)\Z')
re_isInt = re.compile('^(\d+)\n?\Z')

def input_lines(prompt=None):
    lines = ""
    if prompt:
        print(prompt)
    while True:
        try:
            lines += input()
            lines += "\n"
        except EOFError:
            return lines


def setup(args, config):
    if args.lang is None:
        args.lang = config["default_language"]
    if args.url:
        sitename = oj_sites.detect_site(args.url)
        testcase_generator = getattr(oj_sites, sitename)(args.url, config)
        contest, pnumber, testcases = testcase_generator.result()
        cur_dir = os.getcwd().split("/")
        if cur_dir[-1] == contest:
            dirname = pnumber   # contest directoryで実行
        elif cur_dir[-1] == pnumber and cur_dir[-2] == contest:
            dirname = "."       # problem directoryで実行
        else:
            dirname = os.path.join(contest, pnumber)
        url = args.url
    else:
        sample = ""
        contest = args.contest_name
        if args.problem_number is None:
            pnumber = os.path.basename(os.getcwd())
            if not os.path.exists(pnumber + ".sample"):
                print(".sample file not found.")
                print("Please specify problen name(-p) or run in a problen directory.")
                sys.exit(10)
            dirname = "."
        else:
            pnumber = args.problem_number
            dirname = os.path.join(contest, pnumber)
        testcases = []
        url = None
    script_dir = os.path.dirname(os.path.realpath(__file__))
    template_dir = config["templates"].format(src_dir=script_dir)
    template_file = os.path.join(template_dir, "template.{}".format(args.lang))
    if args.file_name is not None:
        script_path = args.file_name
    elif "filename" in config["commands"][args.lang]:
        script_path = config["commands"][args.lang]["filename"]
    else:
        script_path = "{}.{}".format(pnumber, args.lang)
    script_path = os.path.join(dirname, script_path)
    if not os.path.exists(dirname):
        os.makedirs(dirname)
    if os.path.exists(template_file):
        shutil.copyfile(template_file, script_path)
    else:
        print("Template file not found. A blank file is created.")
        with open(script_path, "w") as f:
            f.write("")
    testcase_path = os.path.join(dirname, "{}.sample".format(pnumber))
    if not os.path.exists(testcase_path):
        testcase = TestCase(testcase_path, testcases, url)
        testcase.save()



def add_test(args, config):
    qid = os.path.basename(os.getcwd())
    testcase = TestCase(qid + ".sample")
    test_id = len(testcase.testcases)
    test_str = input_lines(prompt="TestCase {}:".format(test_id))
    out_str = input_lines(prompt="Output {}:".format(test_id))
    testcase.add_testcase(test_str, out_str)
    testcase.save()
    print("Added test case {}.".format(test_id))


def run_cmd(cmd, input_line, timeout):
    tle = False
    t = time.time()
    p = subprocess.Popen(cmd, shell=True,
                         stdin=subprocess.PIPE,
                         stdout=subprocess.PIPE,
                         stderr=subprocess.PIPE,
                         universal_newlines=True)
    stdout_data, stderr_data = ("", "")
    if timeout is not None:
        tl = timeout * 2
    else:
        tl = None
    try:
        stdout_data, stderr_data = p.communicate(timeout=tl,
                                                 input=input_line)
    except subprocess.TimeoutExpired:
        tle = True
        p.kill()
        stdout_data, stderr_data = p.communicate()
    ts = time.time() - t
    return (p.returncode, stdout_data, stderr_data, ts, tle)

def chk_output_floatError(stdout, expect, err):
    result = True
    for lo, le in zip(stdout.split("\n"), expect.split("\n")):
        if re_isFloat.match(le) and not re_isInt.match(le):  # 答がint -> 完全一致
            try:
                flo = float(lo)
                fle = float(le)
            except ValueError:
                return False
            if abs(flo - fle) / max(1, abs(fle)) < err:
                result *= True
            else:
                result *= False
        else:
            result *= lo == le
    return result

def run_test(args, config):
    if args.lang is None:
        args.lang = config["default_language"]
    qid = os.path.basename(os.getcwd())

    if args.file_name:
        fname = args.file_name
    else:
        if "filename" in config["commands"][args.lang]:
            fname = config["commands"][args.lang]["filename"]
        else:
            fname = "{}.{}".format(qid, args.lang)
    oname = "{}.out".format(qid)
    if "compile_cmd" in config["commands"][args.lang]:
        compile_cmd = config["commands"][args.lang]["compile_cmd"]
        compile_cmd = compile_cmd.format(fname=fname, oname=oname)
        print("cmd: {}".format(compile_cmd))
        returncode, stdout, stderr, t, tle = run_cmd(
            compile_cmd, input_line=None, timeout=None)
        print_line = ""
        if returncode == 0:
            print_line += color["Yellow"] + "Compile Succeeded!" + color["reset"]
        else:
            print_line += color["bRed"] + "Compile Error!" + color["reset"]
        print_line += " (exit code: {})".format(returncode)
        print(print_line)
        if stdout:
            print("---- stdout")
            print(stdout)
        if stderr:
            print("---- stderr")
            print(stderr)
        if returncode != 0:
            sys.exit(returncode)
    test_cmd = config["commands"][args.lang]["test_cmd"]
    test_cmd = test_cmd.format(fname=fname, oname=oname)
    testcase = TestCase(qid + ".sample")
    test_list = testcase.testcases
    test_results = []
    for test_num in range(len(test_list)):
        result = {}
        test_case_in = test_list[test_num][0]
        test_case_out = test_list[test_num][1]
        returncode, stdout, stderr, t, tle = run_cmd(test_cmd,
                                                     input_line=test_case_in,
                                                     timeout=args.time_limit)
        print_line = "Test {}: ".format(test_num)
        if tle:
            print_line += color["bRed"] + "Timeout Error!" + color["reset"]
            # result["verdict_c"] = color["bRed"] + "T" + color["reset"]
            result["verdict"] = color["bRed"] + "TLE" + color["reset"]
            result["correct"] = False
        elif returncode != 0:
            print_line += color["bRed"] + "Runtime Error!" + color["reset"]
            # result["verdict_c"] = color["bRed"] + "R" + color["reset"]
            result["verdict"] = color["bRed"] + "RE" + color["reset"]
            result["correct"] = False
        elif t > args.time_limit:
            print_line += color["bRed"] + "Time Limit Expired!" + color["reset"]
            # result["verdict_c"] = color["bRed"] + "T" + color["reset"]
            result["verdict"] = color["bRed"] + "TLE" + color["reset"]
            result["correct"] = False
        elif len(test_case_out) == 0:
            # 期待出力が無ければ正誤判定しない
            print_line += color["bCyan"] + "Done!" + color["reset"]
            # result["verdict_c"] = "-"
            result["verdict"] = color["bCyan"] + "D" + color["reset"]
            result["correct"] = True
        elif stdout != test_case_out:
            if chk_output_floatError(stdout, test_case_out,
                                     err=args.float_error):
                print_line += color["bYellow"] + "Succeeded! (float error)" + color["reset"]
                result["verdict_c"] = "o"
                result["verdict"] = color["bYellow"] + "AC/f" + color["reset"]
                result["correct"] = True
            else:
                print_line += color["bRed"] + "Failed!" + color["reset"]
                # result["verdict_c"] = color["bRed"] + "x" + color["reset"]
                result["verdict"] = color["bRed"] + "WA" + color["reset"]
                result["correct"] = False
        else:
            print_line += color["bYellow"] + "Succeeded!" + color["reset"]
            # result["verdict_c"] = "o"
            result["verdict"] = color["bYellow"] + "AC" + color["reset"]
            result["correct"] = True
        print_line += " (exit code: {})".format(returncode)
        result["time"] = t
        if args.verbose >= 2 or (args.verbose == 1 and not result["correct"]):
            print(print_line)
            print("Time: {:.2f}s / {:.1f}s".format(t, args.time_limit))
            print("---- input")
            for i, line in enumerate(test_case_in.split("\n")):
                if i > 5:
                    print("...")
                    break
                l = line[:20]
                if len(line) > 20:
                    l += " ..."
                print(l)
            if stdout:
                print("---- stdout")
                print(color["Green"] + stdout + color["reset"])
            if stderr:
                print("---- stderr")
                print(color["Green"] + stderr + color["reset"])
            print("---- expected output")
            print(color["Green"] + test_case_out + color["reset"])
        test_results.append(result)

    print("\n -------------------------")
    for i, r in enumerate(test_results):
        print("  case {i:2d} | {vd:^15s} | {t:5.2f}s".format(
            i=i, vd=r["verdict"], t=r["time"]))
    print(" -------------------------")
    n_tests = len(test_list)
    n_passed = sum([r["correct"] for r in test_results])
    print(" Passed: {} / {}".format(n_passed, n_tests))


if __name__ == "__main__":
    import argparse
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers()

    subparser_setup = subparsers.add_parser("setup", aliases=["s"],
                                            help="setup a problem directory")
    subparser_setup.set_defaults(func=setup)
    subparser_setup.add_argument("-l", "--lang", default=None,
                                 help="programming language to write your answer")
    subparser_setup.add_argument("-c", "--contest-name", default="")
    subparser_setup.add_argument("-p", "--problem-number", default=None)
    subparser_setup.add_argument("-u", "--url", default="",
                                 help="URL for question page (ignore --contest-name and --problem number)")
    subparser_setup.add_argument("-f", "--file-name", default=None,
                                 help="create a file with this name in the problem directory.")

    subparser_add = subparsers.add_parser("add-test", aliases=["a"],
                                          help="add a test case")
    subparser_add.set_defaults(func=add_test)

    subparser_test = subparsers.add_parser("test", aliases=["t"],
                                           help="run test")
    subparser_test.set_defaults(func=run_test)
    subparser_test.add_argument("-f", "--file-name", default=None)
    subparser_test.add_argument("-l", "--lang", default=None,
                                help="programming language to write your answer")
    subparser_test.add_argument("-t", "--time-limit", type=int, default=2)
    subparser_test.add_argument("-e", "--float-error", type=float, default=1e-4)
    subparser_test.add_argument("-v", "--verbose", type=int, default=2,
                                help="0: only show verdicts, 1: show outputs of not succeeded cases 2: show outputs of all cases")

    args = parser.parse_args()

    script_dir = os.path.dirname(os.path.realpath(__file__))
    try:
        with open(os.path.join(script_dir, "config.json")) as f:
            config = json.loads(f.read())
    except:
        print("Couldn't read config.json file.")
        config = None

    args.func(args, config)
